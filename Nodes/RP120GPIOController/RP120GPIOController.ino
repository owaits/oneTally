#include <EEPROM.h>
#include "Url.h"
#include "UMDTally.h"

#ifdef TEENSYDUINO
  #include <NativeEthernet.h>
  #include <NativeEthernetUdp.h>
#else
  #include <UIPEthernet.h>
#endif

#ifdef YUN
  #include <Bridge.h>
  #include <YunServer.h>
  #include <YunClient.h>

  #define TClient BridgeClient
  #define TServer BridgeServer
#else
  #define TClient EthernetClient
  #define TServer EthernetServer
#endif

//#define ATEMTally 1

#ifdef ATEMTally
  #include "ATEMmin.h"
#endif

// 90:A2:DA:41:F3:45
// MAC address generated by https://ssl.crox.net/arduinomac/
// see http://blog.crox.net/archives/91-MAC-generator.html

const byte mac[6] = { 0x90, 0xA2, 0xDA, 0x41, 0xF3, 0x45 };

struct Options
{
  uint8_t version;
  uint8_t ip[4];
  uint8_t gateway[4];
  uint8_t subnet[4];
  uint8_t videoHubIP[4];
  uint8_t umdIP[4];
  uint8_t atemIP[4];
  byte videoHubCameraOffset;
  byte videoHubPreviewPort;
};

Options settings = 
{
  2,
  {10, 10, 4, 49},
  {10, 10, 4, 254},
  {255, 255, 255,0},
  {10, 10, 4, 22},
  {10, 10, 4, 35},
  {10, 10, 4, 56},
  1,
  1
};

byte cameraSelect = 0;
byte tallySelect = 0;
bool tallyController = false;

TServer server(80);   //web server port
TClient videoHubClient;
EthernetUDP udp; //UDP used for UMD tally
#ifdef ATEMTally
ATEMmin atemSwitcher;
#endif
UMDTally umd;

void setup() {
// Open serial communications and wait for port to open:
  Serial.begin(115200);

  //Reset to Factory Defaults when D3 and D5 are pulled low.
  pinMode(A5, INPUT_PULLUP);
  uint8_t settingsVersion = EEPROM.read(0);
  if(digitalRead(A5) == LOW || settingsVersion != settings.version)
  {
    setLocalIP(settings.ip, settings.subnet, settings.gateway);
  }
  else
  {
    EEPROM.get(0,settings);
  }
  
  //Setup Ethernet
  #ifdef YUN
    Bridge.begin();
  #else
    // start the Ethernet connection and the server:
    Ethernet.begin(mac, settings.ip, settings.gateway, settings.subnet);
  #endif
  server.begin();
  udp.begin(19522); 

  umd.begin(settings.umdIP);

  connectToATEM();
  connectToVideoHub();

  Serial.print(F("IP:"));
  Serial.println(Ethernet.localIP());
  Serial.print(F("CAM Port:"));
  Serial.println(settings.videoHubCameraOffset);
  Serial.print(F("Preview Port:"));
  Serial.println(settings.videoHubPreviewPort);

  //Initialise the input pins for Tally.
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(6, INPUT_PULLUP);
  pinMode(7, INPUT_PULLUP);
  pinMode(8, INPUT_PULLUP);
  pinMode(9, INPUT_PULLUP);

  //Initialise the input pins for camera select.
  pinMode(A0, INPUT_PULLUP);
  pinMode(A1, INPUT_PULLUP);
  pinMode(A2, INPUT_PULLUP);
  pinMode(A3, INPUT_PULLUP);
}

void connectToVideoHub()
{
  Serial.println(F("Connecting to VideoHub..."));
  
  if(videoHubClient.connected())
    videoHubClient.stop();
  
  //Try and connect to the Video Router
  int retry = 5;
  while(!videoHubClient.connected() && retry >0)
  {      
    //Wait for the Ethernet to initialise
    delay(1000);

    videoHubClient.connect(settings.videoHubIP,9990);
    retry --;
  }
}

void beginTallyController()
{
  if(!tallyController)
  {
    //Initialise the tally pins as outputs.
    #ifdef TEENSYDUINO
    pinMode(2, OUTPUT_OPENDRAIN);
    pinMode(3, OUTPUT_OPENDRAIN);
    pinMode(4, OUTPUT_OPENDRAIN);
    pinMode(5, OUTPUT_OPENDRAIN);
    pinMode(6, OUTPUT_OPENDRAIN);
    pinMode(7, OUTPUT_OPENDRAIN);
    pinMode(8, OUTPUT_OPENDRAIN);
    pinMode(9, OUTPUT_OPENDRAIN);
    #endif
    tallyController = true;

    Serial.println("Tally Controller: On");
  }
}

void connectToATEM()
{
  #ifdef ATEM
  atemSwitcher.begin(settings.atemIP);
  atemSwitcher.serialOutput(1);
  atemSwitcher.connect();

  //Try and connect to the ATEM
  int retry = 5;
  while(!atemSwitcher.isConnected() && retry >0)
  {      
    //Wait for the Ethernet to initialise
    delay(1000);

    atemSwitcher.runLoop();
    retry --;
  }

  Serial.print(F("ATEM Connected: "));
  Serial.println(atemSwitcher.isConnected());
  #endif
}

void copyIP(uint8_t* target, const IPAddress& ip)
{
  target[0] = ip[0];
  target[1] = ip[1];
  target[2] = ip[2];
  target[3] = ip[3];
}

void setLocalIP(const IPAddress& ipAddress, const IPAddress& subnetMask, const IPAddress& gatewayAddress)
{
  copyIP(settings.ip, ipAddress);
  copyIP(settings.subnet, subnetMask);
  copyIP(settings.gateway, gatewayAddress);

  EEPROM.put(0,settings);
}

void setVideoHubOptions(const IPAddress& ipAddress, byte cameraOffset, byte previewPort)
{
  bool reconnectRequired = (IPAddress(settings.videoHubIP) != ipAddress);
  
  copyIP(settings.videoHubIP, ipAddress);
  settings.videoHubCameraOffset = cameraOffset;
  settings.videoHubPreviewPort = previewPort;

  EEPROM.put(0,settings);

  if(reconnectRequired)
    connectToVideoHub();
}

void setUMDOptions(const IPAddress& ipAddress)
{
  copyIP(settings.umdIP, ipAddress);

  EEPROM.put(0,settings);
}

void pingVideoHub()
{
  if(videoHubClient.connected())
  {
    videoHubClient.println(F("PING:"));
    videoHubClient.println();
  }
}


void videoHubCrosspoint(byte input, byte* output, int crossPointCount)
{

if(videoHubClient.connected())
{  
    videoHubClient.println(F("VIDEO OUTPUT ROUTING:"));
    for(int n=0;n<crossPointCount; n++)
    {
      videoHubClient.print(output[n] - 1);
      videoHubClient.print(" ");
      videoHubClient.println(input - 1);
      videoHubClient.println();
    }   
  }  
}

void printWebTextInputIP(TClient& client, const String& name, const String& id, const IPAddress& ipAddress)
{
  client.print(F("<label for='"));
  client.print(id);
  client.print(F("'>"));
  client.print(name);
  client.print(F(":</label><input type='text' name='"));
  client.print(id);
  client.print(F("' value='"));
  client.print(ipAddress);
  client.print(F("' /><br>"));
}
void printWebTextInputInt(TClient& client, const String& name, const String& id, int value)
{
  client.print(F("<label for='"));
  client.print(id);
  client.print(F("'>"));
  client.print(name);
  client.print(F(":</label><input type='text' name='"));
  client.print(id);
  client.print(F("' value='"));
  client.print(value);
  client.print(F("' /><br>"));
}

void loopWebServer()
{
    // Create a client connection
    String rawRequest;
  TClient client = server.available();
  if (client) {
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        //read char by char HTTP request
        if (rawRequest.length() < 100) {

          //store characters to string
          rawRequest += c;
          Serial.print(c); //uncomment to see in serial monitor
        }

        //if HTTP request has ended
        if (c == '\n') {
          Url request;
          Url::Parse(rawRequest,request,4);

          if(request.GetPath() == F("/ip"))
          {
            String ip, subnet, gateway;
            if(request.LookupArgument(F("ip"),ip) && request.LookupArgument(F("sn"),subnet) && request.LookupArgument(F("gt"),gateway))
            {
                IPAddress ipAddress;
                ipAddress.fromString(ip);
                copyIP(settings.ip, ipAddress);
                ipAddress.fromString(subnet);
                copyIP(settings.subnet, ipAddress);
                ipAddress.fromString(gateway);
                copyIP(settings.gateway, ipAddress);

                setLocalIP(settings.ip, settings.subnet, settings.gateway);
            }
          }

          if(request.GetPath() == F("/videoHub"))
          {
            String ip,umdip, cameraPort, previewPort;
            if(request.LookupArgument(F("vhip"),ip) && request.LookupArgument(F("vhcp"),cameraPort) && request.LookupArgument(F("vhpp"),previewPort))
            {
                IPAddress ipAddress;
                ipAddress.fromString(ip);
                setVideoHubOptions(ipAddress, cameraPort.toInt(),previewPort.toInt());
            }
          }

          if(request.GetPath() == F("/umd"))
          {
            String ip;
            if(request.LookupArgument(F("umdip"),ip))
            {
                IPAddress ipAddress;
                ipAddress.fromString(ip);

                Serial.println(ip);
                Serial.println(ipAddress);

                setUMDOptions(ipAddress);
            }
          }
          
          ///////////////
          //Serial.println(readString);

        // start of web page
         client.println(F("HTTP/1.1 200 OK"));
         client.println(F("Content-Type: text/html"));
         client.println(F("<html><head></head><body>"));
         client.println();
         client.print(F("<form action='/ip' method=get>"));
         printWebTextInputIP(client,F("IP Address"), F("ip"), settings.ip);
         printWebTextInputIP(client,F("Subnet"), F("sn"), settings.subnet);
         printWebTextInputIP(client,F("Gateway"), F("gt"), settings.gateway);         
         client.print(F("<input type=submit value='Set IP'></form>"));

         client.print(F("<form action='/videoHub' method=get>"));
         printWebTextInputIP(client,F("VideoHub IP"), F("vhip"), settings.videoHubIP);
         printWebTextInputInt(client,F("VideoHub CAM Port"), F("vhcp"), settings.videoHubCameraOffset);
         printWebTextInputInt(client,F("VideoHub Preview Port"), F("vhpp"), settings.videoHubPreviewPort);       
         client.print(F("<input type=submit value='Update'></form>"));

         client.print(F("<form action='/umd' method=get>"));  
         printWebTextInputIP(client,F("Monitor IP"), F("umdip"), settings.umdIP);    
         client.print(F("<input type=submit value='Update'></form>"));
         
         client.print(F("</body></html>"));
         
         //stopping client
          delay(1);
          client.stop();
        }
       }
     }
   }
}

void loopATEM()
{
  #ifdef ATEM
   atemSwitcher.runLoop();
  #endif
}

void umdTally(byte tallyOn, const char* label, int labelLength)
{
  byte packet[] = {0x5A,0x1C,0x00,0x20,0x01,0x0FF,0x00,0x00,0x05,0x08,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};

  if(tallyOn)
    packet[9] = 0x18;

  strncpy((char*) (packet +10),label,labelLength);
  umdSend(packet, 26);
}

void umdSend(byte* data, int length)
{
  int checksum = 0;
  byte* dataPtr = data;
  for(int n=0;n<length;n++)
  {
    checksum = (checksum + *dataPtr) % 0x100;
    dataPtr ++;
  }
  
  if(udp.beginPacket(settings.umdIP,19523))
  {
      byte crc[] = {(byte) checksum, 0xdd};      

      udp.write(data,length);
      udp.write(crc,2);

      udp.endPacket();
  }  
}

void tallyPinWrite(uint8_t pin, uint8_t level)
{
  #ifdef TEENSYDUINO
    digitalWrite(pin, level);
  #else
    if(level > 0)
    {
      digitalWrite(pin, 0);
      pinMode(pin,OUTPUT);
    }
    else
    {
      pinMode(pin,INPUT);
    }
  #endif

}

unsigned int pingDivider = 1;

void loop() {
    if (videoHubClient.connected() && videoHubClient.available()) {
      char c = videoHubClient.read();
      Serial.print(c);
    }

  byte cameraSelectRead = 0;
    cameraSelectRead = (cameraSelectRead | !digitalRead(A3)) << 1;
    cameraSelectRead = (cameraSelectRead | !digitalRead(A2)) << 1;
    cameraSelectRead = (cameraSelectRead | !digitalRead(A1)) << 1;
    cameraSelectRead = (cameraSelectRead | !digitalRead(A0));

    byte tallySelectRead = 0;

    if(umd.isConnected())
    {
      //If we are not already a tally controller go into controller mode.
      beginTallyController();

      //Read the current tally state over umd
      tallySelectRead = umd.getProgramTally();
    }
#ifdef ATEMTally
    else if(atemSwitcher.isConnected())
    {
      if(atemSwitcher.getTallyByIndexTallyFlags(cameraSelectRead + settings.videoHubCameraOffset -1)>0)
      {
        tallySelectRead = cameraSelectRead;
      }      
    }
#endif
    else
    {
      if(!digitalRead(7)) tallySelectRead = 6;
      if(!digitalRead(6)) tallySelectRead = 5;
      if(!digitalRead(5)) tallySelectRead = 4;
      if(!digitalRead(4)) tallySelectRead = 3;
      if(!digitalRead(3)) tallySelectRead = 2;
      if(!digitalRead(9)) tallySelectRead = 1; 
    }

    //Update the tally output when in controller mode.
    if(tallyController && tallySelect != tallySelectRead)
    {
        tallyPinWrite(7, tallySelectRead == 6);
        tallyPinWrite(6, tallySelectRead == 5);
        tallyPinWrite(5, tallySelectRead == 4);
        tallyPinWrite(4, tallySelectRead == 3);
        tallyPinWrite(3, tallySelectRead == 2);
        tallyPinWrite(9, tallySelectRead == 1);
    }

    //If there has been a change of state send an update.
    if(cameraSelect != cameraSelectRead || tallySelect != tallySelectRead)
    {
        if(cameraSelectRead > 0)
        {
          //Set the crosspoint for preview ports.
          byte rp120PreviewPort[] = { settings.videoHubPreviewPort};
          videoHubCrosspoint(cameraSelectRead + settings.videoHubCameraOffset -1,rp120PreviewPort,sizeof(rp120PreviewPort));

          char label[8];
          sprintf(label,"Camera %d",cameraSelectRead);             
          umdTally(cameraSelectRead == tallySelectRead,label,8);
        }
    }
    else
    {
      pingDivider --;
      if(pingDivider == 0)
      {
        pingVideoHub();
        pingDivider = 0x1FFF;
      }       
    }

    cameraSelect = cameraSelectRead;
    tallySelect = tallySelectRead;

    loopATEM();
    umd.loop();
    loopWebServer();  
}
